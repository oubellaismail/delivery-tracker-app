name: Build and Generate OpenAPI Docs

on:
  push:
    branches:
      - features/back
  pull_request:

jobs:
  build-and-generate-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Docker Compose
      run: |
        if ! docker compose version &> /dev/null; then
          echo "Docker Compose V2 not found, attempting to install..."
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          echo "Docker Compose V2 installed."
        else
          echo "Docker Compose V2 already available."
        fi
        echo "$DOCKER_CONFIG/cli-plugins" >> $GITHUB_PATH

    - name: Set up Java 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build Spring Boot app with Maven
      run: mvn clean package -DskipTests=true -f back/pom.xml

    - name: Build Docker Image for Spring Boot App
      run: docker buildx build --load -t spring-boot-app-image:latest -f back/Dockerfile back

    - name: Start Docker Compose stack
      run: docker compose -f docker/docker-compose.yaml up -d

    - name: Wait for Spring Boot app to be ready
      run: |
        ATTEMPTS=0
        MAX_ATTEMPTS=30
        SLEEP_TIME=2
        while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
          if curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
            echo "Spring Boot app is ready!"
            break
          fi
          echo "Waiting for Spring Boot app... Attempt $((ATTEMPTS+1)) of $MAX_ATTEMPTS"
          sleep $SLEEP_TIME
          ATTEMPTS=$((ATTEMPTS+1))
        done

        if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
          echo "Spring Boot app did not become ready in time."
          docker compose -f docker/docker-compose.yaml logs app
          exit 1
        fi

    - name: Create swagger-ui directory
      run: mkdir -p swagger-ui

    - name: Export OpenAPI YAML
      run: curl -s http://localhost:8080/v3/api-docs.yaml -o swagger-ui/openapi.yaml

    - name: Set up Node.js for linting tools
      uses: actions/setup-node@v3
      with:
        node-version: '20' # Or '20' for a more recent stable Node.js version

    # Removed "Lint with Spectral" step entirely

    - name: Lint with Redocly CLI
      run: |
        # Install Redocly CLI locally (recommended for CI)
        npm install @redocly/cli
        # Execute it using npx, which will find the local installation
        npx redocly lint swagger-ui/openapi.yaml

    - name: Tear down Docker Compose stack
      run: docker compose -f docker/docker-compose.yaml down

    - name: Deploy Swagger UI to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: success()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./swagger-ui
        publish_branch: gh-pages