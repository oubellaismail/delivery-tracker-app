services:
  app:
    build:
      context: ../back  # Relative path to your Spring Boot project root
      dockerfile: Dockerfile # Assumes Dockerfile is directly in ../back
    container_name: spring-boot-app
    ports:
      - "8080:8080"
    environment:

      SPRING_PROFILES_ACTIVE : docker
      
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update


      APP_USER_USERNAME: ${APP_USER_USERNAME}
      APP_USER_PASSWORD: ${APP_USER_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      
    depends_on:
      db:
        condition: service_healthy
    networks:
      - my-app-network
    # --- Optional: For hot-reloading/live changes during local dev ---
    # volumes:
    #   - ../back/target:/app/target # Mount target dir for faster JAR updates
    #   - ../back/src:/app/src # Mount source for live reload if using devtools
    # Command override if needed for devtools setup
    # command: java -jar -Dspring.profiles.active=dev /app/target/*

  front:
    build:
      context: ../front
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./front:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://app:8080/api/v1
    networks:
      - my-app-network
    depends_on:
      - app

  db:
    image: postgres:16-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-app-network
    ports:
      - "5432:5432"

networks:
  my-app-network:
    driver: bridge

volumes:
  db_data: